  SECS_Prototype.cpp
D:\Coding\SECS_Prototype\SECS_Prototype\Types\Containers\SChunkList.hpp(11,15): warning C4099: “SECS::SChunk”: 类型名称以前使用“class”现在使用的是“struct”
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SEntity.hpp(13): message : 参见“SECS::SChunk”的声明
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(11,15): warning C4099: “SECS::SChunk”: 类型名称以前使用“class”现在使用的是“struct”
D:\Coding\SECS_Prototype\SECS_Prototype\Types\Containers\SChunkList.hpp(11): message : 参见“SECS::SChunk”的声明
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(17,23): warning C4099: “SECS::SChunk”: 类型名称以前使用“class”现在使用的是“struct”
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(11): message : 参见“SECS::SChunk”的声明
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(48,25): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(21,2): warning C4099: “SECS::SChunk”: 类型名称以前使用“class”现在使用的是“struct”
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(20): message : 参见“SECS::SChunk”的声明
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(154,25): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(178,25): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SWorld.hpp(95,23): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SWorld.hpp(105,22): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SWorld.hpp(107,23): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(21,15): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(30,15): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(58,14): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(68,15): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(74,14): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(84,15): warning C4244: “初始化”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(87,25): warning C4244: “=”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(98,26): warning C4244: “=”: 从“ULONGLONG”转换到“double”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(107,13): warning C4244: “初始化”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(110,21): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(118,14): warning C4244: “初始化”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(122,25): warning C4244: “=”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(127,27): warning C4244: “=”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(133,25): warning C4244: “=”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(143,26): warning C4244: “=”: 从“ULONGLONG”转换到“float”，可能丢失数据
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(136,22): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message : 查看对正在编译的函数 模板 实例化“void SECS::SEntityManager::Each<T,SECS::ComponentA,SECS::ComponentB>(std::function<void (T *,SECS::SEntity,SECS::ComponentA *,SECS::ComponentB *)>,T *,const SECS::SArcheTypeList &)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         with
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         [
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :             T=SECS::SSystem
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         ]
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(101): message : 在编译 类 模板 成员函数“void SECS::SSystem::ComponentSystemData<SECS::SSystem,SECS::ComponentA,SECS::ComponentB>::__update_Internal(SECS::SEntityManager *)”时
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(126): message : 查看对正在编译的函数 模板 实例化“void SECS::SSystem::ComponentSystemData<SECS::SSystem,SECS::ComponentA,SECS::ComponentB>::__update_Internal(SECS::SEntityManager *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(116): message : 查看对正在编译的 类 模板 实例化“SECS::SSystem::ComponentSystemData<SECS::SSystem,SECS::ComponentA,SECS::ComponentB>”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(138,23): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(141,24): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SArcheTypeManager.hpp(38,23): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(94): message : 查看对正在编译的函数 模板 实例化“SECS::SArcheTypeList SECS::SArcheTypeManager::CompsGetArcheTypes<SECS::ComponentA,SECS::ComponentB>(void)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(93): message : 在编译 类 模板 成员函数“void SECS::SSystem::ComponentSystemData<SECS::SSystem,SECS::ComponentA,SECS::ComponentB>::__collectInfos_Internal(SECS::SEntityManager *,SECS::SArcheTypeManager *)”时
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(131): message : 查看对正在编译的函数 模板 实例化“void SECS::SSystem::ComponentSystemData<SECS::SSystem,SECS::ComponentA,SECS::ComponentB>::__collectInfos_Internal(SECS::SEntityManager *,SECS::SArcheTypeManager *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(116,22): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(159): message : 查看对正在编译的函数 模板 实例化“void SECS::SEntityManager::Each<SECS::ComponentA,SECS::ComponentB>(std::function<void (SECS::SEntity,SECS::ComponentA *,SECS::ComponentB *)>,const SECS::SArcheTypeList &)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SWorld.hpp(48): message : 查看对正在编译的函数 模板 实例化“void SECS::SEntityManager::Each<SECS::ComponentA,SECS::ComponentB>(std::function<void (SECS::SEntity,SECS::ComponentA *,SECS::ComponentB *)>,SECS::SArcheTypeManager *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(92): message : 查看对正在编译的函数 模板 实例化“void SECS::SWorld::Each<SECS::ComponentA,SECS::ComponentB>(std::function<void (SECS::SEntity,SECS::ComponentA *,SECS::ComponentB *)>)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(118,23): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(121,24): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(35,25): warning C4018: “<”: 有符号/无符号不匹配
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(109): message : 查看对正在编译的函数 模板 实例化“int SECS::SArcheType::GetComponentIndex<T>(void)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(109): message :         with
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(109): message :         [
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(109): message :             T=SECS::ComponentA
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SChunk.hpp(109): message :         ]
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(146): message : 查看对正在编译的函数 模板 实例化“T *SECS::SChunk::__getCompPtr<SECS::ComponentA>(size_t)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(146): message :         with
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(146): message :         [
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(146): message :             T=SECS::ComponentA
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(146): message :         ]
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message : 查看对正在编译的函数 模板 实例化“void SECS::SEntityManager::Each<T,SECS::ComponentA,SECS::ComponentB>(std::function<void (T *,SECS::SEntity,SECS::ComponentA *,SECS::ComponentB *)>,T *,const SECS::SArcheTypeList &)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         with
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         [
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :             T=SECS::SSystem
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(102): message :         ]
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(85,1): warning C4554: “&”: 检查运算符优先级是否存在的可能的错误；使用括号阐明优先级
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(94): message : 查看对正在编译的函数 模板 实例化“void TemplatePackUtils::getHash_Internal<T>(size_t,size_t *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(94): message :         with
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(94): message :         [
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(94): message :             T=SECS::ComponentA
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(94): message :         ]
D:\Coding\SECS_Prototype\SECS_Prototype\TemplateUtils\TemplatePackUtils.hpp(32): message : 查看对正在编译的函数 模板 实例化“void TemplatePackUtils::getHash_Internal<SECS::ComponentA,SECS::ComponentB,>(size_t,size_t *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SArcheTypeManager.hpp(30): message : 查看对正在编译的函数 模板 实例化“size_t *TemplatePackUtils::GetHashes<SECS::ComponentA,SECS::ComponentB>(void)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SSystem.hpp(94): message : 查看对正在编译的函数 模板 实例化“SECS::SArcheTypeList SECS::SArcheTypeManager::CompsGetArcheTypes<SECS::ComponentA,SECS::ComponentB>(void)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(60,1): warning C4554: “&”: 检查运算符优先级是否存在的可能的错误；使用括号阐明优先级
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SArcheType.hpp(95): message : 查看对正在编译的函数 模板 实例化“void SECS::SArcheType::__init__Internal<SECS::ComponentB>(void)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SArcheTypeManager.hpp(105): message : 查看对正在编译的函数 模板 实例化“void SECS::SArcheType::Init<SECS::ComponentB>(SECS::SEntity *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SArcheTypeManager.hpp(77): message : 查看对正在编译的函数 模板 实例化“SECS::SArcheType *SECS::SArcheTypeManager::CreateArcheType<SECS::ComponentB>(SECS::SEntity *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Managers\SEntityManager.hpp(47): message : 查看对正在编译的函数 模板 实例化“SECS::SArcheType *SECS::SArcheTypeManager::GetArcheType<SECS::ComponentB>(SECS::SEntity *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\Types\SWorld.hpp(40): message : 查看对正在编译的函数 模板 实例化“SECS::SEntity SECS::SEntityManager::CreateEntity<SECS::ComponentB>(SECS::SArcheTypeManager *)”的引用
D:\Coding\SECS_Prototype\SECS_Prototype\SECS_Prototype.cpp(173): message : 查看对正在编译的函数 模板 实例化“SECS::SEntity SECS::SWorld::CreateEntity<SECS::ComponentB>(void)”的引用
  SECS_Prototype.vcxproj -> D:\Coding\SECS_Prototype\Debug\SECS_Prototype.exe
